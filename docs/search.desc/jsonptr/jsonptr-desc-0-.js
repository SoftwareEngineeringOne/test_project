searchState.loadedDescShard("jsonptr", 0, "jsonptr - JSON Pointers (RFC 6901) for Rust\nA single <code>Token</code> or the root of a JSON Pointer\nAn iterator over the <code>Component</code>s of a JSON Pointer\n<code>Pointer</code> contained invalid encoding (e.g. <code>~</code> not followed by …\nA token within a json pointer contained invalid encoding (<code>~</code>…\n<code>Pointer</code> did not start with a backslash (<code>&#39;/&#39;</code>).\nIndicates that a <code>Pointer</code> was malformed and unable to be …\nA JSON Pointer is a string containing a sequence of zero …\nAn owned, mutable <code>Pointer</code> (akin to <code>String</code>).\nThe document root\nA <code>Token</code> is a segment of a JSON <code>Pointer</code>, preceded by <code>&#39;/&#39;</code> (…\nA segment of a JSON Pointer\nAn iterator over the <code>Token</code>s of a <code>Pointer</code>.\nMerges two <code>Pointer</code>s by appending <code>other</code> onto <code>self</code>.\nCoerces to a Pointer slice.\nThe encoded string representation of this <code>Pointer</code>\nAssign values based on JSON <code>Pointer</code>s\nAttempts to assign <code>src</code> to <code>dest</code> based on the path in this …\nReturns the last <code>Token</code> in the <code>Pointer</code>.\nClears the <code>Pointer</code>, setting it to root (<code>&quot;&quot;</code>).\nOffset of the first invalid encoding from within the …\nReturns <code>Components</code> of this JSON Pointer.\nCreates an owned <code>PointerBuf</code> like <code>self</code> but with <code>other</code> …\nReturns the number of tokens in the <code>Pointer</code>.\nReturns the decoded string representation of the <code>Token</code>.\nDelete values based on JSON Pointers\nAttempts to delete a <code>serde_json::Value</code> based upon the path …\nReturns the encoded string representation of the <code>Token</code>.\nReturns the first <code>Token</code> in the <code>Pointer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Token</code> from an RFC 6901 encoded string.\nCreates a static <code>Pointer</code> from a string.\nCreates a new <code>PointerBuf</code> from a slice of non-encoded …\nReturns the first <code>Token</code> in the <code>Pointer</code>.\nAttempts to get a <code>Token</code> by the index. Returns <code>None</code> if the …\nAbstract index representation for RFC 6901.\nFinds the commonality between this and another <code>Pointer</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts into an owned copy of this token.\nReturns <code>true</code> if the <code>Pointer</code> is empty (i.e. root).\nReturns <code>true</code> if this error is <code>InvalidEncoding</code>\nReturns <code>true</code> if this error is <code>NoLeadingBackslash</code>\nReturns <code>true</code> if the JSON Pointer equals <code>&quot;&quot;</code>.\nReturns the last token in the <code>Pointer</code>.\nThis length expresses the byte count of the underlying …\nCreates a new <code>PointerBuf</code> pointing to a document root.\nConstructs a <code>Token</code> from an arbitrary string.\noffset of the erroneous <code>~</code> from within the <code>Token</code>\nA pointer to the parent of the current path.\nAttempts to parse a string into a <code>Pointer</code>.\nAttempts to parse a string into a <code>PointerBuf</code>.\nOffset of the partial pointer starting with the token …\nRemoves and returns the last <code>Token</code> in the <code>Pointer</code> if it …\nRemoves and returns the first <code>Token</code> in the <code>Pointer</code> if it …\nPushes a <code>Token</code> onto the back of this <code>Pointer</code>.\nPushes a <code>Token</code> onto the front of this <code>Pointer</code>.\nAttempts to replace a <code>Token</code> by the index, returning the …\nResolve values based on JSON <code>Pointer</code>s\nAttempts to resolve a <code>R::Value</code> based on the path in this …\nAttempts to resolve a mutable <code>R::Value</code> based on the path …\nConstant reference to a root pointer\nOffset of the character index from within the first token …\nSplits the <code>Pointer</code> at the given index if the character at …\nSplits the <code>Pointer</code> into the parent path and the last <code>Token</code>.\nSplits the <code>Pointer</code> into the first <code>Token</code> and a remainder …\nReturns the pointer stripped of the given prefix.\nReturns the pointer stripped of the given suffix.\nConverts into an owned <code>PointerBuf</code>\nAttempts to parse the given <code>Token</code> as an array index.\nReturns a <code>serde_json::Value</code> representation of this <code>Pointer</code>\nExtracts an owned copy of this token.\nReturns an iterator of <code>Token</code>s in the <code>Pointer</code>.\nCreates an owned <code>PointerBuf</code> like <code>self</code> but with <code>token</code> …\nCreates an owned <code>PointerBuf</code> like <code>self</code> but with <code>token</code> …\nOffset of the partial pointer starting with the token that …\nThe source <code>InvalidEncodingError</code>\nImplemented by types which can internally assign a (<code>Value</code>) …\nPossible error returned from <code>Assign</code> implementations for …\nError associated with <code>Assign</code>\nA <code>Token</code> within the <code>Pointer</code> failed to be parsed as an array …\ntarget array.\nThe type of value that this implementation can operate on.\nAssigns a value of based on the path provided by a JSON …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOffset of the partial pointer starting with the invalid …\nOffset of the partial pointer starting with the invalid …\nThe source <code>ParseIndexError</code>\nThe source <code>OutOfBoundsError</code>\nDelete is implemented by types which can internally remove …\nThe type of value that this implementation can operate on.\nAttempts to internally delete a value based upon a Pointer.\nRepresents an abstract index into an array.\nThe Token does not represent a valid integer.\nThe Token contains leading zeros.\nThe <code>-</code> token, the position of the next would-be item in the …\nA non-negative integer value\nIndicates that an <code>Index</code> is not within the given bounds.\nIndicates that the <code>Token</code> could not be parsed as valid RFC …\nBounds the index for a given array length (exclusive).\nBounds the index for a given array length (inclusive).\nResolves the index for a given array length.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe resolved numerical index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe provided array length.\nError associated with <code>Resolve</code>\nError associated with <code>ResolveMut</code>\n<code>Pointer</code> could not be resolved because a <code>Token</code> for an array …\n<code>Pointer</code> could not be resolved as a segment of the path was …\n<code>Pointer</code> could not be resolved due to an index being out of …\nA trait implemented by types which can resolve a reference …\nIndicates that the <code>Pointer</code> could not be resolved.\nA trait implemented by types which can resolve a mutable …\n<code>Pointer</code> could not be resolved as the path contains a …\nThe type of value that this implementation can operate on.\nThe type of value that is being resolved.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this error is <code>FailedToParseIndex</code>; …\nReturns <code>true</code> if this error is <code>FailedToParseIndex</code>; …\nReturns <code>true</code> if this error is <code>FailedToParseIndex</code>; …\nReturns <code>true</code> if this error is <code>FailedToParseIndex</code>; …\nOffset of the partial pointer starting with the token …\nResolve a reference to <code>Self::Value</code> based on the path in a …\nResolve a mutable reference to a <code>serde_json::Value</code> based …\nOffset of the partial pointer starting with the invalid …\nOffset of the partial pointer starting with the invalid …\nOffset of the pointer starting with the <code>Token</code> which was …\nOffset of the pointer which was unreachable.\nThe source <code>ParseIndexError</code>\nThe source <code>OutOfBoundsError</code>")